{"version":3,"sources":["DrawerRouter.tsx"],"names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","find","it","filter","DrawerRouter","openByDefault","rest","router","getInitialState","configOptions","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport {\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  ParamListBase,\n} from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  openByDefault?: boolean;\n};\n\nexport type DrawerNavigationState = Omit<\n  TabNavigationState,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport type DrawerActionHelpers<\n  ParamList extends ParamListBase\n> = TabActionHelpers<ParamList> & {\n  /**\n   * Open the drawer sidebar.\n   */\n  openDrawer(): void;\n\n  /**\n   * Close the drawer sidebar.\n   */\n  closeDrawer(): void;\n\n  /**\n   * Open the drawer sidebar if closed, or close if opened.\n   */\n  toggleDrawer(): void;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state: DrawerNavigationState | PartialState<DrawerNavigationState>\n) => Boolean(state.history?.find((it) => it.type === 'drawer'));\n\nconst openDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  openByDefault,\n  ...rest\n}: DrawerRouterOptions = {}): Router<\n  DrawerNavigationState,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = (TabRouter(rest) as unknown) as Router<\n    DrawerNavigationState,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState(configOptions) {\n      let state = router.getInitialState(configOptions);\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(partialState, configOptions) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, configOptions);\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, configOptions) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, configOptions);\n\n        default:\n          return router.getStateForAction(state, action, configOptions);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]}